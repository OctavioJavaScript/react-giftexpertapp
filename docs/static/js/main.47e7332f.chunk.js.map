{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","ponCategories","useState","inputValue","setInputValue","onSubmit","e","trim","length","cats","preventDefault","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","setCategories","onClick","categoria","ReactDOM","render","document","getElementById"],"mappings":"yMAKaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAG1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAiBA,OACI,sBAAMC,SAZW,SAACC,GACfH,EAAWI,OAAOC,OAAS,IAC1BP,GAAe,SAAAQ,GAAI,OAAKN,GAAL,mBAAoBM,OAIvCL,EAAc,KAElBE,EAAEI,kBAIF,SACI,uBACIC,KAAK,OACLC,MAAUT,EACVU,SApBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,0FAC6EC,UAAUH,GADvF,qBAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QARtB,kBAWZM,GAXY,4CAAH,sDCAPO,EAAc,SAAC,GAAwB,IAAtBJ,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAErC,OADAc,QAAQC,IAAIN,EAAIC,EAAOV,GAEnB,sBAAKgB,UAAY,2DAAjB,UACI,qBAAKC,IAAQjB,EAAMkB,IAAQR,IAC3B,4BAAKA,QCFJS,EAAU,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAEtB,ECD4B,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAW,WAGP1B,EAAQC,GACH0B,MAAK,SAAAC,GACFH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAGd,CAACtB,IAELuB,EDlBoBK,CAAa5B,GAAhCa,EAAZ,EAAON,KAAae,EAApB,EAAoBA,QAIpB,OAGI,cAFA,CAEA,sBACA,6BAAMtB,IACJsB,GAAW,0CACb,qBAAKJ,UAAY,YAAjB,SAGQL,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEKA,GADEA,EAAIC,aEflBkB,EAAe,WACxB,MAAoC3C,mBAAS,CAAC,UAA9C,mBAAO4C,EAAP,KAAmBC,EAAnB,KAMA,OACI,qCACI,8CACA,cAAC,EAAD,CAAa9C,cAAkB8C,IAI/B,uBACA,wBAAQC,QAZE,WACdD,EAAc,CAAE,iBAAH,mBAAuBD,MAWhC,qBACA,6BAEQA,EAAWrB,KAAK,SAAAwB,GAGZ,OAAO,cAAC,EAAD,CAECjC,SAAYiC,GADLA,Y,MCxBvCC,IAASC,OAAQ,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.47e7332f.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\n                        // (9836282) aqui recibimos como parametro el metodo para agregar\r\n                        //categorias, definido y enviado desde GifExpertApp.js\r\nexport const AddCategory = ( {ponCategories} ) => {\r\n    //useState: el primer elemento es el stack o contenido de los estados\r\n    //          el segundo elemento es el método para interactuar con el stack (add/remove..)\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n           \r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value); //cuando presionemos una tecla, se agregará al texto del input\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        if(inputValue.trim().length > 2){\r\n            ponCategories( cats => [inputValue, ...cats] );\r\n            //setCategories tiene como parametro propio su catalogo de categories, podemos \r\n            //reutilizarlo para jalar la informacion de su stack y en ella agregar \r\n            //el nuevo valor\r\n            setInputValue(\"\");\r\n        }\r\n        e.preventDefault(); //Este hace que al hacer submit no refresque toda la página\r\n    }\r\n\r\n    return (\r\n        <form onSubmit = { handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value = { inputValue } //asignamos el valor que tendra al iniciar (\"hola bro\" desde useState)\r\n                onChange = { handleInputChange }  \r\n                /> \r\n        </form>\r\n    )\r\n}\r\n\r\n    //Asi forzamos a que se envie el parametro, en caso de no hacerlo tira error\r\n    //fue necesario importar el PropTypes\r\n    //Se tiene que llamar igual que como lo mandamos desde GifExpertApp.js (9836282)\r\n   AddCategory.propTypes = {\r\n    ponCategories: PropTypes.func.isRequired\r\n    }   \r\n","\r\n\r\nexport const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=x945rQOr6YW6ojeEKzs9RrxyqGJHGyfq&q=${ encodeURI(category)}&limit=3`;\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    });\r\n    return gifs;\r\n    //Al ser una funcion async, lo que retornara es una PROMESA, no un arreglo.\r\n}  ","import React from 'react'\r\n\r\nexport const GifGridItem = ( {id, title, url} ) => {\r\n    console.log(id, title, url);\r\n    return (\r\n        <div className = \"card animate__animated animate__bounce animate__delay-2s\">\r\n            <img src = { url } alt = { title }/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React  from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ( {category} ) => {\r\n    //Desestructuracion y renombramiento de variable\r\n    const {data:images, loading} = useFetchGifs(category);\r\n    \r\n      \r\n\r\n    return (\r\n        //utilizaremos un fragment porque se retornan 2 objetos, solo puede retornar lo que \r\n        //este dentro de un div o fragment\r\n        <>\r\n        <h3>{ category }</h3>\r\n        { loading && <p>Loading..</p>}\r\n        <div className = \"card-grid\">\r\n                { \r\n                //\r\n                images.map( img => (\r\n                    <GifGridItem \r\n                    key = {img.id   }\r\n                    { ...img }/>\r\n                    //asi se le mandan los parametros \r\n                ))\r\n                }\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n","import {useState, useEffect} from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n   \r\n\r\n\r\n\r\n    export const useFetchGifs = (category)  => {\r\n\r\n        const [state, setstate] = useState({\r\n            data: [],\r\n            loading: true\r\n        });\r\n\r\n        useEffect( () => {\r\n\r\n\r\n            getGifs(category)\r\n                .then(imgs => {\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });    \r\n                })\r\n                }, [category])\r\n\r\n        return state;\r\n        \r\n\r\n    }","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n\r\n//useState para agregar elementos a un arreglo\r\n//asignar metodo a un boton\r\nexport const GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['Ranma'])\r\n\r\n    const handleAdd = () => {\r\n        setCategories( ['HunterXHunter', ...categories] );\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory ponCategories = { setCategories }/>\r\n            {/* aqui estamos mandando el método para agregar categorias como prametro\r\n            para que AddCategory lo pueda utilizar tambien, le pusimos como nombre ponCategorias \r\n            para que se vea quien lo llama (9836282)*/}\r\n            <hr/>\r\n            <button onClick= { handleAdd }>Agregar</button>\r\n            <ol>\r\n                {\r\n                    categories.map( categoria => {\r\n                        //erroresw en el video lo hacen sin return, si yo no pongo\r\n                        //return no me deja.\r\n                        return <GifGrid \r\n                                key = {categoria}\r\n                                category = {categoria}/>\r\n                        // return <li key={categoria}>{categoria}</li>\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render( <GifExpertApp />, document.getElementById('root') );\n\n"],"sourceRoot":""}